using ToCSharp.Core.Generation.Contracts;
using ToCSharp.Core.Generation.Definitions;

namespace ToCSharp.Core.Generation;

/// <summary>
///     Generate c# definitions generated by exchange format parser
/// </summary>
public class CSharpGenerator
{
    private readonly string _outputPath;
    private readonly IParser _parser;

    public CSharpGenerator(IParser parser, string outputPath)
    {
        _parser = parser;
        _outputPath = outputPath;
    }

    /// <summary>
    ///     Write c# definitions in the directory specifies in _outputPath property
    /// </summary>
    /// <param name="textReader">A text reader to read exchange format content</param>
    public async Task WriteDefinitionsAsync(TextReader textReader)
    {
        var classes = _parser.Parse(textReader);
        foreach (var classDef in classes) await WriteClassDef(classDef);
    }

    /// <summary>
    ///     For each class definition generate a new file in _outputPah composed by class name and .cs suffix
    /// </summary>
    /// <param name="classDef">A class definition to write in file</param>
    private async Task WriteClassDef(Class classDef)
    {
        Directory.CreateDirectory(_outputPath);
        await using var fileWriter = new StreamWriter(GetClassPath(classDef));
        await fileWriter.WriteAsync(classDef.ToString());
    }

    private string GetClassPath(Class classDef)
    {
        return Path.Combine(_outputPath, $"{classDef.Name}.cs");
    }
}